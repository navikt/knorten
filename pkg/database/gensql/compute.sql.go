// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: compute.sql

package gensql

import (
	"context"
)

const computeInstanceCreate = `-- name: ComputeInstanceCreate :exec
INSERT INTO compute_instances ("email", "name")
VALUES ($1, $2)
`

type ComputeInstanceCreateParams struct {
	Email string
	Name  string
}

func (q *Queries) ComputeInstanceCreate(ctx context.Context, arg ComputeInstanceCreateParams) error {
	_, err := q.db.ExecContext(ctx, computeInstanceCreate, arg.Email, arg.Name)
	return err
}

const computeInstanceDelete = `-- name: ComputeInstanceDelete :exec
DELETE
FROM compute_instances
WHERE email = $1
`

func (q *Queries) ComputeInstanceDelete(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, computeInstanceDelete, email)
	return err
}

const computeInstanceGet = `-- name: ComputeInstanceGet :one
SELECT email, name
FROM compute_instances
WHERE email = $1
`

func (q *Queries) ComputeInstanceGet(ctx context.Context, email string) (ComputeInstance, error) {
	row := q.db.QueryRowContext(ctx, computeInstanceGet, email)
	var i ComputeInstance
	err := row.Scan(&i.Email, &i.Name)
	return i, err
}
