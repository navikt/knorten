// Code generated by sqlc. DO NOT EDIT.
// source: compute.sql

package gensql

import (
	"context"
)

const computeInstanceCreate = `-- name: ComputeInstanceCreate :exec
INSERT INTO compute_instances ("owner", "name", "disk_size")
VALUES ($1, $2, $3)
`

type ComputeInstanceCreateParams struct {
	Owner    string
	Name     string
	DiskSize int32
}

func (q *Queries) ComputeInstanceCreate(ctx context.Context, arg ComputeInstanceCreateParams) error {
	_, err := q.db.ExecContext(ctx, computeInstanceCreate, arg.Owner, arg.Name, arg.DiskSize)
	return err
}

const computeInstanceDelete = `-- name: ComputeInstanceDelete :exec
DELETE
FROM compute_instances
WHERE owner = $1
`

func (q *Queries) ComputeInstanceDelete(ctx context.Context, owner string) error {
	_, err := q.db.ExecContext(ctx, computeInstanceDelete, owner)
	return err
}

const computeInstanceGet = `-- name: ComputeInstanceGet :one
SELECT owner, name, disk_size
FROM compute_instances
WHERE owner = $1
`

func (q *Queries) ComputeInstanceGet(ctx context.Context, owner string) (ComputeInstance, error) {
	row := q.db.QueryRowContext(ctx, computeInstanceGet, owner)
	var i ComputeInstance
	err := row.Scan(&i.Owner, &i.Name, &i.DiskSize)
	return i, err
}

const computeInstanceUpdate = `-- name: ComputeInstanceUpdate :exec
UPDATE compute_instances
SET disk_size = $1
WHERE "owner" = $2
`

type ComputeInstanceUpdateParams struct {
	DiskSize int32
	Owner    string
}

func (q *Queries) ComputeInstanceUpdate(ctx context.Context, arg ComputeInstanceUpdateParams) error {
	_, err := q.db.ExecContext(ctx, computeInstanceUpdate, arg.DiskSize, arg.Owner)
	return err
}

const computeInstancesGet = `-- name: ComputeInstancesGet :many
SELECT owner, name, disk_size
FROM compute_instances
`

func (q *Queries) ComputeInstancesGet(ctx context.Context) ([]ComputeInstance, error) {
	rows, err := q.db.QueryContext(ctx, computeInstancesGet)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ComputeInstance{}
	for rows.Next() {
		var i ComputeInstance
		if err := rows.Scan(&i.Owner, &i.Name, &i.DiskSize); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
