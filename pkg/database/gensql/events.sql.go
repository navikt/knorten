// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: events.sql

package gensql

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const eventCreate = `-- name: EventCreate :exec
INSERT INTO
    Events (event_type, task, status, deadline)
VALUES
    (
        $1,
        $2,
        'new',
        NOW() + INTERVAL $3
    )
`

type EventCreateParams struct {
	EventType EventType
	Task      json.RawMessage
	Duration  time.Time
}

func (q *Queries) EventCreate(ctx context.Context, arg EventCreateParams) error {
	_, err := q.db.ExecContext(ctx, eventCreate, arg.EventType, arg.Task, arg.Duration)
	return err
}

const eventGet = `-- name: EventGet :one
SELECT
    id,
    event_type,
    task,
    status,
    deadline,
    created_at,
    updated_at
FROM
    Events
WHERE
    id = $1
`

func (q *Queries) EventGet(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRowContext(ctx, eventGet, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.EventType,
		&i.Task,
		&i.Status,
		&i.Deadline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const eventLogCreate = `-- name: EventLogCreate :exec
INSERT INTO
    Event_Logs (event_id, log_type, message)
VALUES
    ($1, $2, $3)
`

type EventLogCreateParams struct {
	EventID uuid.UUID
	LogType LogType
	Message string
}

func (q *Queries) EventLogCreate(ctx context.Context, arg EventLogCreateParams) error {
	_, err := q.db.ExecContext(ctx, eventLogCreate, arg.EventID, arg.LogType, arg.Message)
	return err
}

const eventLogsForEventGet = `-- name: EventLogsForEventGet :many
SELECT
    id,
    event_id,
    log_type,
    message,
    created_at
FROM
    Event_Logs
WHERE
    event_id = $1
ORDER BY
    created_at DESC
`

func (q *Queries) EventLogsForEventGet(ctx context.Context, eventID uuid.UUID) ([]EventLog, error) {
	rows, err := q.db.QueryContext(ctx, eventLogsForEventGet, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventLog{}
	for rows.Next() {
		var i EventLog
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.LogType,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const eventSetDeadline = `-- name: EventSetDeadline :exec
UPDATE
    Events
SET
    deadline = $1
WHERE
    id = $2
`

type EventSetDeadlineParams struct {
	Deadline time.Time
	ID       uuid.UUID
}

func (q *Queries) EventSetDeadline(ctx context.Context, arg EventSetDeadlineParams) error {
	_, err := q.db.ExecContext(ctx, eventSetDeadline, arg.Deadline, arg.ID)
	return err
}

const eventSetStatus = `-- name: EventSetStatus :exec
UPDATE
    Events
SET
    status = $1
WHERE
    id = $2
`

type EventSetStatusParams struct {
	Status EventStatus
	ID     uuid.UUID
}

func (q *Queries) EventSetStatus(ctx context.Context, arg EventSetStatusParams) error {
	_, err := q.db.ExecContext(ctx, eventSetStatus, arg.Status, arg.ID)
	return err
}

const eventsGetNew = `-- name: EventsGetNew :many
SELECT
    id, event_type, task, status, deadline, created_at, updated_at
FROM
    Events
WHERE
    status = 'new'
ORDER BY
    created_at DESC
`

func (q *Queries) EventsGetNew(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, eventsGetNew)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.EventType,
			&i.Task,
			&i.Status,
			&i.Deadline,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const eventsGetOverdue = `-- name: EventsGetOverdue :many
SELECT
    id, event_type, task, status, deadline, created_at, updated_at
FROM
    Events
WHERE
    status = 'new'
    AND deadline < NOW()
`

func (q *Queries) EventsGetOverdue(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, eventsGetOverdue)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.EventType,
			&i.Task,
			&i.Status,
			&i.Deadline,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
