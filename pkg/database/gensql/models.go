// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package gensql

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ChartType string

const (
	ChartTypeJupyterhub ChartType = "jupyterhub"
	ChartTypeAirflow    ChartType = "airflow"
)

func (e *ChartType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChartType(s)
	case string:
		*e = ChartType(s)
	default:
		return fmt.Errorf("unsupported scan type for ChartType: %T", src)
	}
	return nil
}

type NullChartType struct {
	ChartType ChartType
	Valid     bool // Valid is true if ChartType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChartType) Scan(value interface{}) error {
	if value == nil {
		ns.ChartType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChartType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChartType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.ChartType, nil
}

type ComputeMachineType string

const (
	ComputeMachineTypeE2Standard4 ComputeMachineType = "e2-standard-4"
	ComputeMachineTypeN2Standard2 ComputeMachineType = "n2-standard-2"
	ComputeMachineTypeC2Standard4 ComputeMachineType = "c2-standard-4"
)

func (e *ComputeMachineType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ComputeMachineType(s)
	case string:
		*e = ComputeMachineType(s)
	default:
		return fmt.Errorf("unsupported scan type for ComputeMachineType: %T", src)
	}
	return nil
}

type NullComputeMachineType struct {
	ComputeMachineType ComputeMachineType
	Valid              bool // Valid is true if ComputeMachineType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullComputeMachineType) Scan(value interface{}) error {
	if value == nil {
		ns.ComputeMachineType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ComputeMachineType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullComputeMachineType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.ComputeMachineType, nil
}

type ChartGlobalValue struct {
	ID        uuid.UUID
	Created   sql.NullTime
	Key       string
	Value     string
	ChartType ChartType
	Encrypted bool
}

type ChartTeamValue struct {
	ID        uuid.UUID
	Created   sql.NullTime
	Key       string
	Value     string
	ChartType ChartType
	TeamID    string
}

type ComputeInstance struct {
	TeamID       string
	InstanceName string
	MachineType  ComputeMachineType
}

type Session struct {
	Token       string
	AccessToken string
	Email       string
	Name        string
	Created     time.Time
	Expires     time.Time
	IsAdmin     bool
}

type Team struct {
	ID                    string
	Slug                  string
	Users                 []string
	Created               sql.NullTime
	PendingJupyterUpgrade bool
	PendingAirflowUpgrade bool
	RestrictAirflowEgress bool
	ApiAccess             bool
}
