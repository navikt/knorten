// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package gensql

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ChartType string

const (
	ChartTypeJupyterhub ChartType = "jupyterhub"
	ChartTypeAirflow    ChartType = "airflow"
)

func (e *ChartType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChartType(s)
	case string:
		*e = ChartType(s)
	default:
		return fmt.Errorf("unsupported scan type for ChartType: %T", src)
	}
	return nil
}

type NullChartType struct {
	ChartType ChartType
	Valid     bool // Valid is true if ChartType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChartType) Scan(value interface{}) error {
	if value == nil {
		ns.ChartType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChartType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChartType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChartType), nil
}

type ComputeMachineType string

const (
	ComputeMachineTypeE2Standard4 ComputeMachineType = "e2-standard-4"
	ComputeMachineTypeN2Standard2 ComputeMachineType = "n2-standard-2"
	ComputeMachineTypeC2Standard4 ComputeMachineType = "c2-standard-4"
)

func (e *ComputeMachineType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ComputeMachineType(s)
	case string:
		*e = ComputeMachineType(s)
	default:
		return fmt.Errorf("unsupported scan type for ComputeMachineType: %T", src)
	}
	return nil
}

type NullComputeMachineType struct {
	ComputeMachineType ComputeMachineType
	Valid              bool // Valid is true if ComputeMachineType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullComputeMachineType) Scan(value interface{}) error {
	if value == nil {
		ns.ComputeMachineType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ComputeMachineType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullComputeMachineType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ComputeMachineType), nil
}

type EventStatus string

const (
	EventStatusNew        EventStatus = "new"
	EventStatusProcessing EventStatus = "processing"
	EventStatusCompleted  EventStatus = "completed"
	EventStatusFailed     EventStatus = "failed"
	EventStatusInvalid    EventStatus = "invalid"
)

func (e *EventStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventStatus(s)
	case string:
		*e = EventStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for EventStatus: %T", src)
	}
	return nil
}

type NullEventStatus struct {
	EventStatus EventStatus
	Valid       bool // Valid is true if EventStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventStatus) Scan(value interface{}) error {
	if value == nil {
		ns.EventStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventStatus), nil
}

type Op string

const (
	OpCreate Op = "create"
	OpUpdate Op = "update"
	OpDelete Op = "delete"
)

func (e *Op) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Op(s)
	case string:
		*e = Op(s)
	default:
		return fmt.Errorf("unsupported scan type for Op: %T", src)
	}
	return nil
}

type NullOp struct {
	Op    Op
	Valid bool // Valid is true if Op is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOp) Scan(value interface{}) error {
	if value == nil {
		ns.Op, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Op.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOp) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Op), nil
}

type ResourceType string

const (
	ResourceTypeTeam    ResourceType = "team"
	ResourceTypeJupyter ResourceType = "jupyter"
	ResourceTypeAirflow ResourceType = "airflow"
)

func (e *ResourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ResourceType(s)
	case string:
		*e = ResourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for ResourceType: %T", src)
	}
	return nil
}

type NullResourceType struct {
	ResourceType ResourceType
	Valid        bool // Valid is true if ResourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullResourceType) Scan(value interface{}) error {
	if value == nil {
		ns.ResourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ResourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullResourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ResourceType), nil
}

type ChartGlobalValue struct {
	ID        uuid.UUID
	Created   sql.NullTime
	Key       string
	Value     string
	ChartType ChartType
	Encrypted bool
}

type ChartTeamValue struct {
	ID        uuid.UUID
	Created   sql.NullTime
	Key       string
	Value     string
	ChartType ChartType
	TeamID    string
}

type ComputeInstance struct {
	TeamID       string
	InstanceName string
	MachineType  ComputeMachineType
}

type Event struct {
	ID           uuid.UUID
	Op           Op
	ResourceType ResourceType
	Param        json.RawMessage
	Status       EventStatus
	Deadline     time.Time
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

type EventLog struct {
	ID        uuid.UUID
	EventID   uuid.UUID
	Message   string
	CreatedAt time.Time
}

type Session struct {
	Token       string
	AccessToken string
	Email       string
	Name        string
	Created     time.Time
	Expires     time.Time
	IsAdmin     bool
}

type Team struct {
	ID                    string
	Slug                  string
	Users                 []string
	Created               sql.NullTime
	PendingJupyterUpgrade bool
	PendingAirflowUpgrade bool
	RestrictAirflowEgress bool
	ApiAccess             bool
	Owner                 string
}
